library(dplyr)
library(tidyr)
library(ggplot2)
library(coop)
library(tidyverse)
library(MASS)
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
test_idx <- sample(1:nrow(data), round(nrow(data)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data[train_idx,]
data_test <- data[test_idx,]
U <- length(unique(data[1:5000,]$userId))
I <- length(unique(data[1:5000,]$movieId))
source("../lib/cross_validation_A1+R1+R2.R")
source("../lib/Matrix_Factorization_A1+R1+R2.R")
f_list <- seq(10, 20, 10)
l_list <- seq(-2, -1, 1)
f_l <- expand.grid(f_list, l_list)
load(file = "../output/rmseR12.Rdata")
rmse <- data.frame(rbind(t(result_summary_r12[1,,]), t(result_summary_r12[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
rmse %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
source("../lib/cross_validation_pmf.R")
source("../lib/Matrix_Factorization_pmf.R")
f_list <- c(10,20,10,20)
lp_list <- c(1,1,0.5,0.5)
lq_list <- c(1,1,0.5,0.5)
f_l = cbind(f_list,lp_list,lq_list)
load(file = "../output/rmse_pmf.Rdata")
rmse_pmf <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", sigma_p = ", f_l[,2], ", sigma_q = ", f_l[,3]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse_pmf$epoch <- as.numeric(gsub("X", "", rmse_pmf$epoch))
rmse_pmf %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
set.seed(0)
#get the subset of train set and test set from the first 5000 data
test_idx2 <- sample(1:5000, 5000/5, 0)
train_idx2 <- setdiff(1:5000, test_idx2)
data_train2 <- data[train_idx2,]
data_test2 <- data[test_idx2,]
resultr12 <- gradesc.r12(f = 10, lambda = 0.1,lrate = 0.01, max.iter = 100,
stopping.deriv = 0.01,data = data2,
train = data_train2, test =data_test2)
resultr12 <- gradesc.r12(f = 10, lambda = 0.1,lrate = 0.01, max.iter = 100,
stopping.deriv = 0.01,data = data[1:5000,],
train = data_train2, test =data_test2)
load(file = "../output/mat_facR12.RData")
source("../lib/KNN.R")
KNN_Rating <- KNN.post(data_train2, resultr12) # Rating after applying KNN
Rating <- t(resultr12$p)%*%(resultr12$q)  # Rating without knn
#Knn_Rating: (32*2427: the number in the matrix is the score of ratings)
RMSE <- function(rating, est_rating){
sqr_err <- function(obs){
sqr_error <- (obs[3] - est_rating[as.character(obs[1]), as.character(obs[2])])^2
return(sqr_error)
}
return(sqrt(mean(apply(rating, 1, sqr_err))))
}
A1_chart <- tibble(rating=c("Without KNN","With KNN"),
train=c(RMSE(data_train2,Rating),RMSE(data_train2,KNN_Rating)),
test=c(RMSE(data_test2,Rating),RMSE(data_test2,KNN_Rating)))
A1_chart
# train mse with knn is the same as mse without knn.
load(file = "../output/mat_fac_pmf.RData")
source("../lib/KNN.R")
KNN_Rating <- KNN.post(data_train2, result) # Rating after applying KNN
Rating <- t(result$p)%*%(result$q)  # Rating without KNN
RMSE <- function(rating, est_rating){
sqr_err <- function(obs){
sqr_error <- (obs[3] - est_rating[as.character(obs[1]), as.character(obs[2])])^2
return(sqr_error)
}
return(sqrt(mean(apply(rating, 1, sqr_err))))
}
A2_chart<-tibble(rating=c("Without KNN","With KNN"),
train=c(RMSE(data_train2,Rating),RMSE(data_train2,KNN_Rating)),
test=c(RMSE(data_test2,Rating),RMSE(data_test2,KNN_Rating)))
A2_chart
RMSE <- data.frame(epochs = seq(10, 100, 10),
Training_MSE = resultr12$train_RMSE,
Test_MSE = resultr12$test_RMSE) %>%
gather(key = train_or_test, value = RMSE, -epochs)
RMSE %>% ggplot(aes(x = epochs, y = RMSE,col = train_or_test)) +
geom_point() +
scale_x_discrete(limits = seq(10, 100, 10)) +
xlim(c(0, 100))+
labs(x = "epochs",  title = "A1+R1+R2")
RMSE <- data.frame(epochs = seq(20, 100, 20),
Training_MSE = result$train_RMSE,
Test_MSE = result$test_RMSE) %>%
gather(key = train_or_test, value = RMSE, -epochs)
RMSE %>% ggplot(aes(x = rep(seq(20, 100, 20),2), y = RMSE,col = train_or_test)) +
geom_point() +
scale_x_discrete(limits = seq(20, 100, 20)) +
xlim(c(0, 100)) +
labs(x = "epochs",  title = "A2")
resultr12 <- gradesc.r12(f = 10, lambda = 0.1,lrate = 0.01, max.iter = 100,
stopping.deriv = 0.01,data = data[1:5000,],
train = data_train2, test =data_test2)
resultr12 <- gradesc.r12(f = 10, lambda = 0.1,lrate = 0.01, max.iter = 100,
stopping.deriv = 0.01,data = data[1:5000,],
train = data_train2, test =data_test2)
result <- gradesc_pmf(f = 10, sigma_p = 0.5,sigma_q = 0.5, lrate = 0.01, max.iter = 100, stopping.deriv = 0.01, data = data[1:5000,], train = data_train2, test = data_test2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(coop)
library(tidyverse)
library(MASS)
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
test_idx <- sample(1:nrow(data), round(nrow(data)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data[train_idx,]
data_test <- data[test_idx,]
U <- length(unique(data[1:5000,]$userId))
I <- length(unique(data[1:5000,]$movieId))
source("../lib/cross_validation_A1+R1+R2.R")
source("../lib/Matrix_Factorization_A1+R1+R2.R")
f_list <- seq(10, 20, 10)
l_list <- seq(-2, -1, 1)
f_l <- expand.grid(f_list, l_list)
load(file = "../output/rmseR12.Rdata")
rmse <- data.frame(rbind(t(result_summary_r12[1,,]), t(result_summary_r12[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
rmse %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
set.seed(0)
#get the subset of train set and test set from the first 5000 data
test_idx2 <- sample(1:5000, 5000/5, 0)
train_idx2 <- setdiff(1:5000, test_idx2)
data_train2 <- data[train_idx2,]
data_test2 <- data[test_idx2,]
resultr12 <- gradesc.r12(f = 10, lambda = 0.1,lrate = 0.01, max.iter = 100,
stopping.deriv = 0.01,data = data[1:5000,],
train = data_train2, test =data_test2)
result <- gradesc_pmf(f = 10, sigma_p = 0.5,sigma_q = 0.5, lrate = 0.01, max.iter = 100, stopping.deriv = 0.01, data = data[1:5000,], train = data_train2, test = data_test2)
source("../lib/cross_validation_pmf.R")
source("../lib/Matrix_Factorization_pmf.R")
f_list <- c(10,20,10,20)
lp_list <- c(1,1,0.5,0.5)
lq_list <- c(1,1,0.5,0.5)
f_l = cbind(f_list,lp_list,lq_list)
load(file = "../output/rmse_pmf.Rdata")
rmse_pmf <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", sigma_p = ", f_l[,2], ", sigma_q = ", f_l[,3]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse_pmf$epoch <- as.numeric(gsub("X", "", rmse_pmf$epoch))
rmse_pmf %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
set.seed(0)
#get the subset of train set and test set from the first 5000 data
test_idx2 <- sample(1:5000, 5000/5, 0)
train_idx2 <- setdiff(1:5000, test_idx2)
data_train2 <- data[train_idx2,]
data_test2 <- data[test_idx2,]
resultr12 <- gradesc.r12(f = 10, lambda = 0.1,lrate = 0.01, max.iter = 100,
stopping.deriv = 0.01,data = data[1:5000,],
train = data_train2, test =data_test2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data<-read.csv("data.csv")%>%as_tibble()
rf<-read.csv("rf.csv")%>%as_tibble()%>%select(Date,value)
rf<-data%>%select(Date)%>%left_join(rf,by=c("Date"="Date"))%>%fill(value,.direction=c("downup"))
df=data
# short sell
price=data%>%select(AAPL_Adj:KO_Adj)
n = dim(price)[1]
return = price[2:n,]/price[1:(n-1),]-1
mu = colMeans(return)
sigma = cov(return)
m = 2000
muP = seq(0,0.005,length=m)
sdP = rep(0, length(muP))
weight = matrix(0,nrow=m,ncol=5)
for (i in 1:length(muP)) {
result = solve.QP(Dmat=2*sigma,dvec=rep(0,5),
Amat = cbind(rep(1,5),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
# short sell
price=data%>%select(AAPL_Adj:KO_Adj)
n = dim(price)[1]
return = price[2:n,]/price[1:(n-1),]-1
mu = colMeans(return)
sigma = cov(return)
m = 2000
muP = seq(0,0.005,length=m)
sdP = rep(0, length(muP))
weight = matrix(0,nrow=m,ncol=5)
for (i in 1:length(muP)) {
result = solve.QP(Dmat=2*sigma,dvec=rep(0,5),
Amat = cbind(rep(1,5),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
# short sell
price=data%>%select(AAPL_Adj:KO_Adj)
n = dim(price)[1]
return = price[2:n,]/price[1:(n-1),]-1
mu = colMeans(return)
sigma = cov(return)
m = 2000
muP = seq(0,0.005,length=m)
sdP = rep(0, length(muP))
weight = matrix(0,nrow=m,ncol=5)
for (i in 1:length(muP)) {
result = solve.QP(Dmat=2*sigma,dvec=rep(0,5),
Amat = cbind(rep(1,5),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
library(tidyverse)
data<-read.csv("data.csv")%>%as_tibble()
rf<-read.csv("rf.csv")%>%as_tibble()%>%select(Date,value)
rf<-data%>%select(Date)%>%left_join(rf,by=c("Date"="Date"))%>%fill(value,.direction=c("downup"))
df=data
library(tidyverse)
data<-read.csv("data.csv")%>%as_tibble()
rf<-read.csv("rf.csv")%>%as_tibble()%>%select(Date,value)
rf<-data%>%select(Date)%>%left_join(rf,by=c("Date"="Date"))%>%fill(value,.direction=c("downup"))
df=data
# short sell
price=data%>%select(AAPL_Adj:KO_Adj)
n = dim(price)[1]
return = price[2:n,]/price[1:(n-1),]-1
mu = colMeans(return)
sigma = cov(return)
m = 2000
muP = seq(0,0.005,length=m)
sdP = rep(0, length(muP))
weight = matrix(0,nrow=m,ncol=5)
for (i in 1:length(muP)) {
result = solve.QP(Dmat=2*sigma,dvec=rep(0,5),
Amat = cbind(rep(1,5),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
library(quadprog)
# short sell
price=data%>%select(AAPL_Adj:KO_Adj)
n = dim(price)[1]
return = price[2:n,]/price[1:(n-1),]-1
mu = colMeans(return)
sigma = cov(return)
m = 2000
muP = seq(0,0.005,length=m)
sdP = rep(0, length(muP))
weight = matrix(0,nrow=m,ncol=5)
for (i in 1:length(muP)) {
result = solve.QP(Dmat=2*sigma,dvec=rep(0,5),
Amat = cbind(rep(1,5),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
# add risk-free
rf_rate = rf$value%>%last()/253/100
sharpe_ratio= (muP-rf_rate)/sdP
tangency_index = which.max(sharpe_ratio)
weight
weight[tangency_index , ]
# no short sell
n = dim(price)[1]
return = price[2:n,]/price[1:(n-1),] - 1
mu = colMeans(return)
sigma = cov(return)
m = 2000
muP_noSS = seq(max(min(mu),0),max(mu)*0.99,length=m) # target portfolio return
sdP_noSS = rep(0, length(muP_noSS)) # sd of portfolio return
weight = matrix(0,nrow=m,ncol=5) # storage for portfolio weights
for (i in 1:length(muP_noSS)) {
result = solve.QP(Dmat=2*sigma,dvec=rep(0,5),
Amat=cbind(rep(1,5),mu,diag(1,5)),
bvec=c(1,muP_noSS[i],rep(0,5)),meq=2)
sdP_noSS[i] = sqrt(result$value)
weight[i,] = result$solution}
# add risk-free
rf_rate_noss = rf$value%>%last()/253/100
sharpe_ratio_noss= (muP_noSS-rf_rate)/sdP_noSS
tangency_index_noss = which.max(sharpe_ratio_noss)
weight[tangency_index , ]
sum(weight[tangency_index , ])
